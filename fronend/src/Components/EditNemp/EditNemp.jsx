import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate, useParams } from 'react-router-dom';
import './EditNemp.css';

export const EditNemp = () => {
    const { empId } = useParams(); // ‡∏£‡∏±‡∏ö empId ‡∏à‡∏≤‡∏Å URL params
    const navigate = useNavigate();  

    const [formData, setFormData] = useState({
        empid: '',
        name: '',
        lastname: '',
        phone: '',
        email: '',
        username: '',
        password: '',
        job: '',
    });

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å API ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ empId
    useEffect(() => {
        if (!empId) {
            alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');
            return;
        }

        const fetchEmployeeData = async () => {
            try {
                const response = await axios.get(`http://localhost:3002/api/employees/${empId}`);
                if (response.data) {
                    setFormData(response.data);
                }
            } catch (error) {
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:', error);
                alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
            }
        };

        fetchEmployeeData();
    }, [empId]);

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
    const handleInputChange = (event) => {
        const { name, value } = event.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleSubmit = async () => {
        if (!empId) {
            alert('‡πÑ‡∏°‡πà‡∏û‡∏ö empId');
            return;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ formData ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const missingFields = Object.entries(formData).filter(([key, value]) => !value).map(([key]) => key);
        if (missingFields.length > 0) {
            alert(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${missingFields.join(', ')}`);
            return;
        }

        try {
            // ‚úÖ ‡∏•‡∏ö empid ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å formData ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
            const { empid, ...dataToSend } = formData;

            await axios.put(`http://localhost:3002/api/employees/${empId}`, dataToSend);
            navigate('/Manage_employee', { state: { successMessage: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' } });
        } catch (error) {
            if (error.response) {
                console.error('Error response:', error.response.data);
                alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${error.response.data.message}`);
            } else {
                console.error('Error:', error.message);
                alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
            }
        }
    };

    return (
        <div className="editnemp-container">
            <h1 className="title">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h1>
            <div className="edit-box">
                <div className="form-container">
                    {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á empid ‡πÅ‡∏ï‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô readOnly */}
                    <div className="form-group">
                        <label>‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô :</label>
                        <input
                            type="text"
                            name="empid"
                            value={formData.empid || ''}
                            readOnly // üëà ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
                        />
                    </div>

                    {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô empid) */}
                    {Object.entries(formData)
                        .filter(([key]) => key !== 'empid')
                        .map(([key, value]) => (
                            <div className="form-group" key={key}>
                                <label>{key} :</label>
                                <input
                                    type={key === 'password' ? 'password' : 'text'}
                                    name={key}
                                    value={value || ''}
                                    onChange={handleInputChange}
                                />
                            </div>
                        ))}
                </div>

                {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô */}
                <button className="confirm-button" onClick={handleSubmit}>
                    ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                </button>
            </div>
        </div>
    );
};

export default EditNemp;
