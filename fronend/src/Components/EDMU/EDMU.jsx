import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './EDMU.css';

export const EDMU = () => {
  const navigate = useNavigate();
  const [items, setItems] = useState([]);
  const [totalPrice, setTotalPrice] = useState(0);

  const fetchOrders = async () => {
    try {
      const response = await fetch('http://localhost:3002/api/orders');
      const data = await response.json();
  
      console.log("üìå API ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", data);
  
      if (!Array.isArray(data)) {
        console.error("‚ùå API ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå:", data);
        return;
      }
  
      const filteredData = data.filter(item => Number(item.tableid) === 4);
      console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á (tableid=4):", filteredData);
  
      setItems(filteredData);
      setTotalPrice(filteredData.reduce((sum, item) => sum + item.price * (item.quantity || 1), 0));
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
    }
  };
  
  useEffect(() => {
    fetchOrders();
  }, []);

  const removeItem = async (oderid) => {
    console.log("üî¥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö Order ID:", oderid);

    if (!oderid) {
      console.error("‚ùå oderid ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!");
      return;
    }

    try {
      const response = await fetch(`http://localhost:3002/api/orders/${oderid}`, { method: 'DELETE' });
      const responseData = await response.text(); 
      console.log("üîç API Response:", response.status, responseData);

      if (response.status === 404) {
        alert(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Order ID: ${oderid}`);
        return;
      }

      if (!response.ok) {
        throw new Error(`‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${response.status} - ${responseData}`);
      }

      setItems(prevItems => {
        const newItems = prevItems.filter(item => item.oderid !== oderid);
        setTotalPrice(newItems.reduce((sum, item) => sum + item.price * (item.quantity || 1), 0));
        return newItems;
      });

      console.log(`‚úÖ ‡∏•‡∏ö Order ID: ${oderid} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);

    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå:", error);
      alert(`‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
    }
  };

  const placeOrder = () => {
    alert("‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!");
  };

  return (
    <div className="shopping-cart">
      <h1>Shopping Cart</h1>
      <p className="item-count">‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {items.length} ‡∏ä‡∏¥‡πâ‡∏ô</p>
      <div className="cart-items">
        {items.length > 0 ? (
          items.map((item, index) => (
            <div key={item.oderid || `temp-${index}`} className="cart-item"> 
              <div className="item-details">
                <h2>{item.manu}</h2>
                <p>{item.note}</p>
                <p>{item.price} ‡∏ø</p>
                <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {item.quantity || 1}</p>
                <button 
                  className="remove-button" 
                  onClick={() => removeItem(item.oderid)}
                  disabled={!item.oderid} 
                >
                  ‡∏•‡∏ö
                </button>
              </div>
            </div>
          ))
        ) : (
          <p>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ</p>
        )}
      </div>

      <div className="cart-summary">
        <p>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏° {totalPrice} ‡∏ö‡∏≤‡∏ó</p>
      </div>
      <button className="order-button" onClick={placeOrder}>‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£</button>
    </div>
  );
};

export default EDMU;